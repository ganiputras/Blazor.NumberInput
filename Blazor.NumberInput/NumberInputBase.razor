@using System.Globalization
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<decimal?>

<div class="input-group">
    @if (!string.IsNullOrWhiteSpace(DisplayPrefix))
    {
        <span class="input-group-text">@DisplayPrefix</span>
    }

    <input class="form-control @TextAlign @Css @CssClass"
           type="text"
           inputmode="decimal"
           id="@Id"
           name="@Name"
           value="@CurrentValueAsString"
           step="@StepDisplay"
           placeholder="@Placeholder"
           autocomplete="@AutoComplete"
           disabled="@Disabled"
           required="@Required"
           @oninput="OnInput"
           @onblur="OnBlur"
           @onkeydown="OnKeyDown"
           @onkeydown:preventDefault="@_preventKey"
           @onpaste="OnPaste"
           @attributes="AdditionalAttributes" />

    @if (!string.IsNullOrWhiteSpace(DisplaySuffix))
    {
        <span class="input-group-text">@DisplaySuffix</span>
    }
</div>

@code {
    // Format dan budaya lokal
    [Parameter] public int DecimalPlaces { get; set; } = 0;
    [Parameter] public string Format { get; set; } = "N0";
    [Parameter] public CultureInfo Culture { get; set; } = CultureInfo.CurrentCulture;

    // Format ulang saat blur
    [Parameter] public bool AutoFormatOnBlur { get; set; } = true;

    // Range batas nilai
    [Parameter] public decimal? MinValue { get; set; }
    [Parameter] public decimal? MaxValue { get; set; }
    [Parameter] public decimal? Step { get; set; }

    // Atribut umum input
    [Parameter] public string? Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string? Name { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? AutoComplete { get; set; } = "off";
    [Parameter] public string? Css { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? TextAlign { get; set; } = "text-start";
    [Parameter] public bool? Disabled { get; set; }
    [Parameter] public bool? Required { get; set; }

    // Tampilan prefix/suffix
    [Parameter] public string? DisplayPrefix { get; set; }
    [Parameter] public string? DisplaySuffix { get; set; }


    private bool _preventKey;
    private bool _paste;
    private string StepDisplay => Step?.ToString(Culture) ?? "any";

    /// <summary>Mengubah nilai ke string sesuai format dan budaya</summary>
    protected override string? FormatValueAsString(decimal? value)
    {
        return value?.ToString(Format, Culture);
    }

    /// <summary>Parsing input pengguna menjadi decimal?</summary>
    protected override bool TryParseValueFromString(string? value, out decimal? result, out string? validationErrorMessage)
    {
        result = null;
        validationErrorMessage = null;

        if (string.IsNullOrWhiteSpace(value))
            return true;

        try
        {
            var cleaned = value.Replace(Culture.NumberFormat.NumberGroupSeparator, "");
            if (decimal.TryParse(cleaned, NumberStyles.Number, Culture, out var parsed))
            {
                parsed = Math.Round(parsed, DecimalPlaces);

                if (MinValue is not null && parsed < MinValue) parsed = MinValue.Value;
                if (MaxValue is not null && parsed > MaxValue) parsed = MaxValue.Value;

                result = parsed;
                return true;
            }
        }
        catch (Exception ex)
        {
            validationErrorMessage = $"Invalid input: {ex.Message}";
        }

        validationErrorMessage = "Input is not a valid number.";
        return false;
    }

    private void OnInput(ChangeEventArgs e)
    {
        CurrentValueAsString = e.Value?.ToString();
    }

    private void OnBlur(FocusEventArgs _)
    {
        if (AutoFormatOnBlur)
        {
            CurrentValueAsString = FormatValueAsString(CurrentValue);
        }
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        _preventKey = false;

        if (e.Key is "Tab" or "Backspace" or "Delete" or "Enter" or "ArrowLeft" or "ArrowRight")
            return;

        if (e.Key is "ArrowUp")
        {
            CurrentValue = (CurrentValue ?? 0) + (Step ?? 1);
            _preventKey = true;
        }
        else if (e.Key is "ArrowDown")
        {
            CurrentValue = (CurrentValue ?? 0) - (Step ?? 1);
            _preventKey = true;
        }
        else if (!IsValidInputKey(e.Key))
        {
            _preventKey = true;
        }
    }

    private void OnPaste(ClipboardEventArgs _) => _paste = true;

    private bool IsValidInputKey(string key)
    {
        if (key.Length == 1 && char.IsDigit(key[0])) return true;
        string decimalSep = Culture.NumberFormat.NumberDecimalSeparator;
        return key == decimalSep;
    }
}
